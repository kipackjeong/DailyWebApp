@page "/todo"
@using System.Threading
@using Microsoft.EntityFrameworkCore.Internal
@using ToDoWebApp.Data
@using ToDoWebApp.Model
@inject IToDoData ToDoData

<AuthorizeView>
    <Authorized Context="Auth">
        <EditForm Model="@_toDoList">
            <div id="form-content">
                <table class="table table-hover" Model="@_toDoList">
                    <thead>
                        <tr>
                            <th><i class="oi oi-pencil"></i></th>
                            <th><i class="oi oi-calendar"></i></th>
                            <th><i class="oi oi-check"></i></th>
                            <th><i class="oi oi-trash"></i></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in _toDoList)
                        {
                            <tr>
                                <td>
                                    @item.Title
                                </td>
                                <td>
                                    @item.DateTimeCreated.ToString("hh:mm tt")
                                </td>
                                <td>
                                    @if (item.Done == Done.Done)
                                    {
                                        item.done = true;
                                    }
                                    else
                                    {
                                        item.done = false;
                                    }

                                    <InputCheckbox @bind-Value="item.done" @onclick="(() => DoneCheck(item))" class="custom-checkbox"></InputCheckbox>
                                </td>
                                <td>
                                    <button class="btn btn-outline-primary" @onclick="(() => DeleteToDo(item))"> Delete </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            
        </EditForm>

        <!-- #region ToDo Input -->
        <div id="form-content">
            <form style="width:100%;">
                <div class="input-group mb-3" style="border:none">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-addon3">To Do</span>
                    </div>
                    <input type="text" class="form-control" id="basic-url" aria-describedby="basic-addon3" @bind="_newItemTitle">
                    <button class="btn btn-primary" @onclick="AddToDo"> Add </button>
                </div>
            </form>
        </div>
        <!-- #endregion -->
    </Authorized>

    <NotAuthorized>
        Please Login
    </NotAuthorized>
</AuthorizeView>

@code {
    public IList<ToDoItem> _toDoList = new List<ToDoItem>();
    private string _newItemTitle { get; set; }

    // Page Model Methods
    protected async override Task OnInitializedAsync()
    {
        _toDoList = await ToDoData.GetTodayToDoItem();
    }

    private async Task AddToDo()
    {
        if (!String.IsNullOrEmpty(_newItemTitle))
        {
            var newToDoItem = new ToDoItem(_newItemTitle, DateTime.Now);

            await ToDoData.InsertItem(newToDoItem);

            _newItemTitle = string.Empty;
        }
        _toDoList = await ToDoData.GetTodayToDoItem();
    }

    private async Task DeleteToDo(ToDoItem item)
    {
        await ToDoData.DeleteItem(item);

        _toDoList = await ToDoData.GetTodayToDoItem();
    }

    private async Task DoneCheck(ToDoItem item)
    {
        item.Done = item.Done == Done.NotDone ? Done.Done : Done.NotDone;

        if (item.Done == Done.Done)
        {
            await ToDoData.UpdateToDoneStatus(item);
        }
        else
        {
            await ToDoData.UpdateToUnDoneStatus(item);
        }

    }
}