@page "/todo"
@using System.Threading
@using Microsoft.EntityFrameworkCore.Internal
@using ToDoWebApp.Data
@using ToDoWebApp.Model
@inject IToDoData ToDoData

<h3>ToDoPage</h3>

<EditForm Model="@_toDoList">
    <table class="table">
        <thead>
            <tr>
                <th><i class="oi oi-document"></i>Title</th>
                <th><i class="oi oi-calendar"></i>Date</th>
                <th><i class="oi oi-check"></i>Done</th>
                <th><i class="oi oi-trash"></i></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _toDoList)
            {
                <tr>
                    <td>
                        @item.Title
                    </td>
                    <td>
                        @item.DateTimeCreated.ToString("hh:mm tt")
                    </td>
                    <td>
                    @if(item.Done == Done.Done)
                    {
                        item.done = true;
                    }
                    else
                    {
                        item.done = false;
                    }

                        <InputCheckbox  @bind-Value="item.done" @onclick ="(() => DoneCheck(item))" class="custom-checkbox"></InputCheckbox>
                    </td>
                    <td>
                        <button class="btn btn-outline-primary" @onclick="(() => DeleteToDo(item))"> Delete </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</EditForm>
<form>
    <input placeholder="What do you need to do?" @bind="_newItemTitle" />
    <button class="btn btn-primary" @onclick="AddToDo"> Add </button>
</form>







@code {
    public IList<ToDoItem> _toDoList = new List<ToDoItem>();
    private string _newItemTitle { get; set; }

    // Page Model Methods
    protected async override Task OnInitializedAsync()
    {
        _toDoList = await ToDoData.GetTodayToDoItem();
    }

    private async Task AddToDo()
    {
        if(!String.IsNullOrEmpty(_newItemTitle))
        {
            var newToDoItem = new ToDoItem(_newItemTitle, DateTime.Now);

            await ToDoData.InsertItem(newToDoItem);

            _newItemTitle = string.Empty;
        }
        _toDoList = await ToDoData.GetTodayToDoItem();
    }

    private async Task DeleteToDo(ToDoItem item)
    {
        await ToDoData.DeleteItem(item);

        _toDoList = await ToDoData.GetTodayToDoItem();
    }

    private async Task DoneCheck(ToDoItem item)
    {
        item.Done = item.Done == Done.NotDone ? Done.Done : Done.NotDone;


        if (item.Done == Done.Done)
        {
            await ToDoData.UpdateToDoneStatus(item);
        }
        else
        {
            await ToDoData.UpdateToUnDoneStatus(item);
        }

    }
}