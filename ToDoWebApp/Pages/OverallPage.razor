@page "/overall"
@using ToDoWebApp.Model
@using ToDoWebApp.Data
@using System.Runtime.CompilerServices
@using System.Collections
@using Blazored.Modal
@using Blazored.Modal.Services
 
@inject IToDoData ToDoData
<AuthorizeView>
    <Authorized Context="Auth">
        <div id="form-content">
            <EditForm Model="@_toDoDict">
                <!--for demo wrap-->
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>
                                <i id ="blue-icon"class="oi oi-calendar"></i>
                            </th>
                            <th><i id ="blue-icon" class="oi oi-check"></i></th>
                            <th><i id ="blue-icon" class="oi oi-x"></i></th>
                            <th><i id ="blue-icon" class="oi oi-magnifying-glass"></i></th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var dateAndItems in _toDoDict)
                        {
                            <tr>

                                <td>
                                    @dateAndItems.Key
                                </td>
                                <td>
                                    @dateAndItems.Value.DoneList.Count
                                </td>
                                <td>
                                    @dateAndItems.Value.NotDoneList.Count

                                </td>
                                <td>
                                    <button class="btn btn-outline-primary" @onclick="(()=>DetailClick(dateAndItems.Value))">Detail</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </EditForm>
        </div>

    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>

@code {
    //Modal
    [CascadingParameter] public IModalService Modal { get; set; }

    //DataContainer
    public IDictionary<string, Date> _toDoDict = new Dictionary<string, Date>();
    

    // load data upon initialization
    protected override async Task OnInitializedAsync()
    {
        _toDoDict = await ToDoData.GetItemsByDate();
    }

    private async Task DetailClick(Date date)
    {
        date.DetailClicked = date.DetailClicked == true ? false : true;

        var modalParam = new ModalParameters();

        modalParam.Add(nameof(OverallModalPage.ToDoDate), date);


        var modal = Modal.Show<OverallModalPage>($"{date.DateCreated}", modalParam);
        var result = await modal.Result;
        var dataResult = result.Data;

        if(!result.Cancelled)
        {
            await ToDoData.UpdateAll((Date)dataResult);

            _toDoDict = await ToDoData.GetItemsByDate();
        }

    }


    private async Task DoneCheck(ToDoItem item)
    {
        item.Done = item.Done == Done.NotDone ? Done.Done : Done.NotDone;

        if (item.Done == Done.Done)
        {
            await ToDoData.UpdateToDoneStatus(item);
        }
        else
        {
            await ToDoData.UpdateToUnDoneStatus(item);
        }
    }



}