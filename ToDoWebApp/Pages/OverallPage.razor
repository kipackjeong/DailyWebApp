@page "/overall"
@using ToDoWebApp.Model
@using ToDoWebApp.Data
@using System.Runtime.CompilerServices
@using System.Collections
@inject IToDoData ToDoData

<AuthorizeView>
    <Authorized Context="Auth">
        <EditForm Model="@_toDoDict">
            <!--for demo wrap-->
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>
                            <i class="oi oi-calendar"></i>
                        </th>
                        <th><i class="oi oi-check"></i></th>
                        <th><i class="oi oi-x"></i></th>
                        <th><i class="oi oi-magnifying-glass"></i></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var dateAndItems in _toDoDict)
                    {
                    <td>
                        @dateAndItems.Key
                    </td>
                    <td>
                        @dateAndItems.Value[0].Count
                    </td>
                    <td>
                        @dateAndItems.Value[1].Count
                    </td>
                    <td>
                        <button class="btn btn-outline-primary">Detail</button>
                    </td>
                }

                    </tbody>

                </table>
            </EditForm>
            <ToDoPage></ToDoPage>
        </Authorized>
        <NotAuthorized>
        </NotAuthorized>
    </AuthorizeView>

    @code {
        public IList<ToDoItem> _toDoList = new List<ToDoItem>();
        public IDictionary<string, List<ToDoItem>[]> _toDoDict = new Dictionary<string, List<ToDoItem>[]>
    ();

        // load data upon initialization
        protected override async Task OnInitializedAsync()
        {
            _toDoList = await ToDoData.GetOverallItem();

            // iterate over todolist
            // generate key(DateCreated) and value(list of items)
            foreach (var item in _toDoList)
            {
                if (!_toDoDict.ContainsKey(item.DateCreated))
                {
                    _toDoDict[item.DateCreated] = new List<ToDoItem>[]
                    {
                        new List<ToDoItem>(),
                        new List<ToDoItem>()
                    };
                }
                // if task is done store it to list at 0 index

                switch (item.Done)
                {
                    case Done.Done:
                        _toDoDict[item.DateCreated][0].Add(item);
                        break;
                    // if taks is not done store it to list at 1index
                    case Done.NotDone:
                        _toDoDict[item.DateCreated][1].Add(item);
                        break;
                }
            }
        }
    }