@page "/overall"
@using ToDoWebApp.Model
@using ToDoWebApp.Data
@using System.Runtime.CompilerServices
@using System.Collections
@inject IToDoData ToDoData

<h3>Overall</h3>
<AuthorizeView>
    <Authorized Context="Auth">
        <EditForm Model="_toDoDict">
            <section>
                <!--for demo wrap-->
                <h1>Fixed Table header</h1>
                <div class="tbl-header">
                    <table cellpadding="0" cellspacing="0" border="0">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Done</th>
                                <th>Not Done</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var dateAndItems in _toDoDict)
                            {
                            <td>
                                <h3>
                                    @dateAndItems.Key
                                </h3>
                            </td>
                            <td>
                                <h3> @dateAndItems.Value[0].Count Tasks Finished</h3>
                            </td>
                            <td>
                                <h3> @dateAndItems.Value[1].Count Tasks Left To Do</h3>
                            </td>
                        }
                            </tbody>
                        </table>
                    </div>
                </section>
            </EditForm>
        </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>

    @code {
        public IList<ToDoItem> _toDoList = new List<ToDoItem>();
        public IDictionary<string, List<ToDoItem>[]> _toDoDict = new Dictionary<string, List<ToDoItem>[]>
    ();

        // load data upon initialization
        protected override async Task OnInitializedAsync()
        {
            _toDoList = await ToDoData.GetOverallItem();

            // iterate over todolist
            // generate key(DateCreated) and value(list of items)
            foreach (var item in _toDoList)
            {
                if (!_toDoDict.ContainsKey(item.DateCreated))
                {
                    _toDoDict[item.DateCreated] = new List<ToDoItem>[]
                    {
                        new List<ToDoItem>(),
                        new List<ToDoItem>()
                    };
                }
                // if task is done store it to list at 0 index

                switch (item.Done)
                {
                    case Done.Done:
                        _toDoDict[item.DateCreated][0].Add(item);
                        break;
                    // if taks is not done store it to list at 1index
                    case Done.NotDone:
                        _toDoDict[item.DateCreated][1].Add(item);
                        break;
                }
            }
        }
    }
